/* automatically generated by rust-bindgen 0.69.4 */

impl hiprtcResult {
    #[doc = "< Success"]
    pub const HIPRTC_SUCCESS: hiprtcResult = hiprtcResult(0);
}
impl hiprtcResult {
    #[doc = "< Out of memory"]
    pub const HIPRTC_ERROR_OUT_OF_MEMORY: hiprtcResult = hiprtcResult(1);
}
impl hiprtcResult {
    #[doc = "< Failed to create program"]
    pub const HIPRTC_ERROR_PROGRAM_CREATION_FAILURE: hiprtcResult = hiprtcResult(2);
}
impl hiprtcResult {
    #[doc = "< Invalid input"]
    pub const HIPRTC_ERROR_INVALID_INPUT: hiprtcResult = hiprtcResult(3);
}
impl hiprtcResult {
    #[doc = "< Invalid program"]
    pub const HIPRTC_ERROR_INVALID_PROGRAM: hiprtcResult = hiprtcResult(4);
}
impl hiprtcResult {
    #[doc = "< Invalid option"]
    pub const HIPRTC_ERROR_INVALID_OPTION: hiprtcResult = hiprtcResult(5);
}
impl hiprtcResult {
    #[doc = "< Compilation error"]
    pub const HIPRTC_ERROR_COMPILATION: hiprtcResult = hiprtcResult(6);
}
impl hiprtcResult {
    #[doc = "< Failed in builtin operation"]
    pub const HIPRTC_ERROR_BUILTIN_OPERATION_FAILURE: hiprtcResult = hiprtcResult(7);
}
impl hiprtcResult {
    #[doc = "< No name expression after compilation"]
    pub const HIPRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION: hiprtcResult = hiprtcResult(8);
}
impl hiprtcResult {
    #[doc = "< No lowered names before compilation"]
    pub const HIPRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION: hiprtcResult = hiprtcResult(9);
}
impl hiprtcResult {
    #[doc = "< Invalid name expression"]
    pub const HIPRTC_ERROR_NAME_EXPRESSION_NOT_VALID: hiprtcResult = hiprtcResult(10);
}
impl hiprtcResult {
    #[doc = "< Internal error"]
    pub const HIPRTC_ERROR_INTERNAL_ERROR: hiprtcResult = hiprtcResult(11);
}
impl hiprtcResult {
    #[doc = "< Error in linking"]
    pub const HIPRTC_ERROR_LINKING: hiprtcResult = hiprtcResult(100);
}
#[repr(transparent)]
#[doc = " @addtogroup GlobalDefs\n @{\n\n/\n/**\n hiprtc error code"]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct hiprtcResult(pub ::std::os::raw::c_int);
impl hiprtcJIT_option {
    #[doc = "< Maximum registers may be used in a thread, passed to compiler"]
    pub const HIPRTC_JIT_MAX_REGISTERS: hiprtcJIT_option = hiprtcJIT_option(0);
}
impl hiprtcJIT_option {
    #[doc = "< Number of thread per block"]
    pub const HIPRTC_JIT_THREADS_PER_BLOCK: hiprtcJIT_option = hiprtcJIT_option(1);
}
impl hiprtcJIT_option {
    #[doc = "< Value for total wall clock time"]
    pub const HIPRTC_JIT_WALL_TIME: hiprtcJIT_option = hiprtcJIT_option(2);
}
impl hiprtcJIT_option {
    #[doc = "< Pointer to the buffer with logged information"]
    pub const HIPRTC_JIT_INFO_LOG_BUFFER: hiprtcJIT_option = hiprtcJIT_option(3);
}
impl hiprtcJIT_option {
    #[doc = "< Size of the buffer in bytes for logged info"]
    pub const HIPRTC_JIT_INFO_LOG_BUFFER_SIZE_BYTES: hiprtcJIT_option = hiprtcJIT_option(4);
}
impl hiprtcJIT_option {
    #[doc = "< Pointer to the buffer with logged error(s)"]
    pub const HIPRTC_JIT_ERROR_LOG_BUFFER: hiprtcJIT_option = hiprtcJIT_option(5);
}
impl hiprtcJIT_option {
    #[doc = "< Size of the buffer in bytes for logged error(s)"]
    pub const HIPRTC_JIT_ERROR_LOG_BUFFER_SIZE_BYTES: hiprtcJIT_option = hiprtcJIT_option(6);
}
impl hiprtcJIT_option {
    #[doc = "< Value of optimization level for generated codes"]
    pub const HIPRTC_JIT_OPTIMIZATION_LEVEL: hiprtcJIT_option = hiprtcJIT_option(7);
}
impl hiprtcJIT_option {
    #[doc = "< The target context, which is the default"]
    pub const HIPRTC_JIT_TARGET_FROM_HIPCONTEXT: hiprtcJIT_option = hiprtcJIT_option(8);
}
impl hiprtcJIT_option {
    #[doc = "< JIT target"]
    pub const HIPRTC_JIT_TARGET: hiprtcJIT_option = hiprtcJIT_option(9);
}
impl hiprtcJIT_option {
    #[doc = "< Fallback strategy"]
    pub const HIPRTC_JIT_FALLBACK_STRATEGY: hiprtcJIT_option = hiprtcJIT_option(10);
}
impl hiprtcJIT_option {
    #[doc = "< Generate debug information"]
    pub const HIPRTC_JIT_GENERATE_DEBUG_INFO: hiprtcJIT_option = hiprtcJIT_option(11);
}
impl hiprtcJIT_option {
    #[doc = "< Generate log verbose"]
    pub const HIPRTC_JIT_LOG_VERBOSE: hiprtcJIT_option = hiprtcJIT_option(12);
}
impl hiprtcJIT_option {
    #[doc = "< Generate line number information"]
    pub const HIPRTC_JIT_GENERATE_LINE_INFO: hiprtcJIT_option = hiprtcJIT_option(13);
}
impl hiprtcJIT_option {
    #[doc = "< Set cache mode"]
    pub const HIPRTC_JIT_CACHE_MODE: hiprtcJIT_option = hiprtcJIT_option(14);
}
impl hiprtcJIT_option {
    #[doc = "< @deprecated  New SM3X option."]
    pub const HIPRTC_JIT_NEW_SM3X_OPT: hiprtcJIT_option = hiprtcJIT_option(15);
}
impl hiprtcJIT_option {
    #[doc = "< Set fast compile"]
    pub const HIPRTC_JIT_FAST_COMPILE: hiprtcJIT_option = hiprtcJIT_option(16);
}
impl hiprtcJIT_option {
    #[doc = "< Array of device symbol names to be relocated to the host"]
    pub const HIPRTC_JIT_GLOBAL_SYMBOL_NAMES: hiprtcJIT_option = hiprtcJIT_option(17);
}
impl hiprtcJIT_option {
    #[doc = "< Array of host addresses to be relocated to the device"]
    pub const HIPRTC_JIT_GLOBAL_SYMBOL_ADDRESS: hiprtcJIT_option = hiprtcJIT_option(18);
}
impl hiprtcJIT_option {
    #[doc = "< Number of symbol count."]
    pub const HIPRTC_JIT_GLOBAL_SYMBOL_COUNT: hiprtcJIT_option = hiprtcJIT_option(19);
}
impl hiprtcJIT_option {
    #[doc = "< @deprecated  Enable link-time optimization for device code"]
    pub const HIPRTC_JIT_LTO: hiprtcJIT_option = hiprtcJIT_option(20);
}
impl hiprtcJIT_option {
    #[doc = "< @deprecated  Set single-precision denormals."]
    pub const HIPRTC_JIT_FTZ: hiprtcJIT_option = hiprtcJIT_option(21);
}
impl hiprtcJIT_option {
    #[doc = "< @deprecated  Set single-precision floating-point division and\n< reciprocals"]
    pub const HIPRTC_JIT_PREC_DIV: hiprtcJIT_option = hiprtcJIT_option(22);
}
impl hiprtcJIT_option {
    #[doc = "< @deprecated  Set single-precision floating-point square root"]
    pub const HIPRTC_JIT_PREC_SQRT: hiprtcJIT_option = hiprtcJIT_option(23);
}
impl hiprtcJIT_option {
    #[doc = "< @deprecated  Enable floating-point multiplies and adds/subtracts operations"]
    pub const HIPRTC_JIT_FMA: hiprtcJIT_option = hiprtcJIT_option(24);
}
impl hiprtcJIT_option {
    #[doc = "< Number of options"]
    pub const HIPRTC_JIT_NUM_OPTIONS: hiprtcJIT_option = hiprtcJIT_option(25);
}
impl hiprtcJIT_option {
    #[doc = "< Linker options to be passed on to compiler"]
    pub const HIPRTC_JIT_IR_TO_ISA_OPT_EXT: hiprtcJIT_option = hiprtcJIT_option(10000);
}
impl hiprtcJIT_option {
    #[doc = "< Count of linker options to be passed on to\n< compiler  @note  Only supported for the AMD platform"]
    pub const HIPRTC_JIT_IR_TO_ISA_OPT_COUNT_EXT: hiprtcJIT_option = hiprtcJIT_option(10001);
}
#[repr(transparent)]
#[doc = " hiprtc JIT option"]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct hiprtcJIT_option(pub ::std::os::raw::c_int);
impl hiprtcJITInputType {
    #[doc = "< Input cubin"]
    pub const HIPRTC_JIT_INPUT_CUBIN: hiprtcJITInputType = hiprtcJITInputType(0);
}
impl hiprtcJITInputType {
    #[doc = "< Input PTX"]
    pub const HIPRTC_JIT_INPUT_PTX: hiprtcJITInputType = hiprtcJITInputType(1);
}
impl hiprtcJITInputType {
    #[doc = "< Input fat binary"]
    pub const HIPRTC_JIT_INPUT_FATBINARY: hiprtcJITInputType = hiprtcJITInputType(2);
}
impl hiprtcJITInputType {
    #[doc = "< Input object"]
    pub const HIPRTC_JIT_INPUT_OBJECT: hiprtcJITInputType = hiprtcJITInputType(3);
}
impl hiprtcJITInputType {
    #[doc = "< Input library"]
    pub const HIPRTC_JIT_INPUT_LIBRARY: hiprtcJITInputType = hiprtcJITInputType(4);
}
impl hiprtcJITInputType {
    #[doc = "< Input NVVM"]
    pub const HIPRTC_JIT_INPUT_NVVM: hiprtcJITInputType = hiprtcJITInputType(5);
}
impl hiprtcJITInputType {
    #[doc = "< Number of legacy input type"]
    pub const HIPRTC_JIT_NUM_LEGACY_INPUT_TYPES: hiprtcJITInputType = hiprtcJITInputType(6);
}
impl hiprtcJITInputType {
    #[doc = "< LLVM bitcode or IR assembly"]
    pub const HIPRTC_JIT_INPUT_LLVM_BITCODE: hiprtcJITInputType = hiprtcJITInputType(100);
}
impl hiprtcJITInputType {
    #[doc = "< LLVM bundled bitcode"]
    pub const HIPRTC_JIT_INPUT_LLVM_BUNDLED_BITCODE: hiprtcJITInputType = hiprtcJITInputType(101);
}
impl hiprtcJITInputType {
    #[doc = "< LLVM archives of boundled bitcode"]
    pub const HIPRTC_JIT_INPUT_LLVM_ARCHIVES_OF_BUNDLED_BITCODE: hiprtcJITInputType =
        hiprtcJITInputType(102);
}
impl hiprtcJITInputType {
    pub const HIPRTC_JIT_NUM_INPUT_TYPES: hiprtcJITInputType = hiprtcJITInputType(9);
}
#[repr(transparent)]
#[doc = " hiprtc JIT input type"]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct hiprtcJITInputType(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ihiprtcLinkState {
    _unused: [u8; 0],
}
#[doc = "  hiprtc link state\n"]
pub type hiprtcLinkState = *mut ihiprtcLinkState;
extern "C" {
    #[doc = "  @ingroup Runtime\n\n @brief Returns text string message to explain the error which occurred\n\n @param [in] result  code to convert to string.\n @returns  const char pointer to the NULL-terminated error string\n\n @warning In HIP, this function returns the name of the error,\n if the hiprtc result is defined, it will return \"Invalid HIPRTC error code\"\n\n @see hiprtcResult"]
    pub fn hiprtcGetErrorString(result: hiprtcResult) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup Runtime\n @brief Sets the parameters as major and minor version.\n\n @param [out] major  HIP Runtime Compilation major version.\n @param [out] minor  HIP Runtime Compilation minor version.\n\n @returns #HIPRTC_ERROR_INVALID_INPUT, #HIPRTC_SUCCESS\n"]
    pub fn hiprtcVersion(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
    ) -> hiprtcResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _hiprtcProgram {
    _unused: [u8; 0],
}
#[doc = "  hiprtc program\n"]
pub type hiprtcProgram = *mut _hiprtcProgram;
extern "C" {
    #[doc = " @ingroup Runtime\n @brief Adds the given name exprssion to the runtime compilation program.\n\n @param [in] prog  runtime compilation program instance.\n @param [in] name_expression  const char pointer to the name expression.\n @returns  #HIPRTC_SUCCESS\n\n If const char pointer is NULL, it will return #HIPRTC_ERROR_INVALID_INPUT.\n\n @see hiprtcResult"]
    pub fn hiprtcAddNameExpression(
        prog: hiprtcProgram,
        name_expression: *const ::std::os::raw::c_char,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @ingroup Runtime\n @brief Compiles the given runtime compilation program.\n\n @param [in] prog  runtime compilation program instance.\n @param [in] numOptions  number of compiler options.\n @param [in] options  compiler options as const array of strins.\n @returns #HIPRTC_SUCCESS\n\n If the compiler failed to build the runtime compilation program,\n it will return #HIPRTC_ERROR_COMPILATION.\n\n @see hiprtcResult"]
    pub fn hiprtcCompileProgram(
        prog: hiprtcProgram,
        numOptions: ::std::os::raw::c_int,
        options: *mut *const ::std::os::raw::c_char,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @ingroup Runtime\n @brief Creates an instance of hiprtcProgram with the given input parameters,\n and sets the output hiprtcProgram prog with it.\n\n @param [in, out] prog  runtime compilation program instance.\n @param [in] src  const char pointer to the program source.\n @param [in] name  const char pointer to the program name.\n @param [in] numHeaders  number of headers.\n @param [in] headers  array of strings pointing to headers.\n @param [in] includeNames  array of strings pointing to names included in program source.\n @returns #HIPRTC_SUCCESS\n\n Any invalide input parameter, it will return #HIPRTC_ERROR_INVALID_INPUT\n or #HIPRTC_ERROR_INVALID_PROGRAM.\n\n If failed to create the program, it will return #HIPRTC_ERROR_PROGRAM_CREATION_FAILURE.\n\n @see hiprtcResult"]
    pub fn hiprtcCreateProgram(
        prog: *mut hiprtcProgram,
        src: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        numHeaders: ::std::os::raw::c_int,
        headers: *mut *const ::std::os::raw::c_char,
        includeNames: *mut *const ::std::os::raw::c_char,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Destroys an instance of given hiprtcProgram.\n @ingroup Runtime\n @param [in] prog  runtime compilation program instance.\n @returns #HIPRTC_SUCCESS\n\n If prog is NULL, it will return #HIPRTC_ERROR_INVALID_INPUT.\n\n @see hiprtcResult"]
    pub fn hiprtcDestroyProgram(prog: *mut hiprtcProgram) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Gets the lowered (mangled) name from an instance of hiprtcProgram with the given input parameters,\n and sets the output lowered_name with it.\n @ingroup Runtime\n @param [in] prog  runtime compilation program instance.\n @param [in] name_expression  const char pointer to the name expression.\n @param [in, out] lowered_name  const char array to the lowered (mangled) name.\n @returns #HIPRTC_SUCCESS\n\n If any invalide nullptr input parameters, it will return #HIPRTC_ERROR_INVALID_INPUT\n\n If name_expression is not found, it will return #HIPRTC_ERROR_NAME_EXPRESSION_NOT_VALID\n\n If failed to get lowered_name from the program, it will return #HIPRTC_ERROR_COMPILATION.\n\n @see hiprtcResult"]
    pub fn hiprtcGetLoweredName(
        prog: hiprtcProgram,
        name_expression: *const ::std::os::raw::c_char,
        lowered_name: *mut *const ::std::os::raw::c_char,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Gets the log generated by the runtime compilation program instance.\n @ingroup Runtime\n @param [in] prog  runtime compilation program instance.\n @param [out] log  memory pointer to the generated log.\n @returns #HIPRTC_SUCCESS\n\n @see hiprtcResult"]
    pub fn hiprtcGetProgramLog(
        prog: hiprtcProgram,
        log: *mut ::std::os::raw::c_char,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Gets the size of log generated by the runtime compilation program instance.\n\n @param [in] prog  runtime compilation program instance.\n @param [out] logSizeRet  size of generated log.\n @returns #HIPRTC_SUCCESS\n\n @see hiprtcResult"]
    pub fn hiprtcGetProgramLogSize(prog: hiprtcProgram, logSizeRet: *mut usize) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Gets the pointer of compilation binary by the runtime compilation program instance.\n @ingroup Runtime\n @param [in] prog  runtime compilation program instance.\n @param [out] code  char pointer to binary.\n @returns #HIPRTC_SUCCESS\n\n @see hiprtcResult"]
    pub fn hiprtcGetCode(prog: hiprtcProgram, code: *mut ::std::os::raw::c_char) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Gets the size of compilation binary by the runtime compilation program instance.\n @ingroup Runtime\n @param [in] prog  runtime compilation program instance.\n @param [out] codeSizeRet  the size of binary.\n @returns #HIPRTC_SUCCESS\n\n @see hiprtcResult"]
    pub fn hiprtcGetCodeSize(prog: hiprtcProgram, codeSizeRet: *mut usize) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Gets the pointer of compiled bitcode by the runtime compilation program instance.\n\n @param [in] prog  runtime compilation program instance.\n @param [out] bitcode  char pointer to bitcode.\n @return HIPRTC_SUCCESS\n\n @see hiprtcResult"]
    pub fn hiprtcGetBitcode(
        prog: hiprtcProgram,
        bitcode: *mut ::std::os::raw::c_char,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Gets the size of compiled bitcode by the runtime compilation program instance.\n @ingroup Runtime\n\n @param [in] prog  runtime compilation program instance.\n @param [out] bitcode_size  the size of bitcode.\n @returns #HIPRTC_SUCCESS\n\n @see hiprtcResult"]
    pub fn hiprtcGetBitcodeSize(prog: hiprtcProgram, bitcode_size: *mut usize) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Creates the link instance via hiprtc APIs.\n @ingroup Runtime\n @param [in] num_options  Number of options\n @param [in] option_ptr  Array of options\n @param [in] option_vals_pptr  Array of option values cast to void*\n @param [out] hip_link_state_ptr  hiprtc link state created upon success\n\n @returns #HIPRTC_SUCCESS, #HIPRTC_ERROR_INVALID_INPUT, #HIPRTC_ERROR_INVALID_OPTION\n\n @see hiprtcResult"]
    pub fn hiprtcLinkCreate(
        num_options: ::std::os::raw::c_uint,
        option_ptr: *mut hiprtcJIT_option,
        option_vals_pptr: *mut *mut ::std::os::raw::c_void,
        hip_link_state_ptr: *mut hiprtcLinkState,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Adds a file with bit code to be linked with options\n @ingroup Runtime\n @param [in] hip_link_state  hiprtc link state\n @param [in] input_type  Type of the input data or bitcode\n @param [in] file_path  Path to the input file where bitcode is present\n @param [in] num_options  Size of the options\n @param [in] options_ptr  Array of options applied to this input\n @param [in] option_values  Array of option values cast to void*\n\n @returns #HIPRTC_SUCCESS\n\n If input values are invalid, it will\n @return #HIPRTC_ERROR_INVALID_INPUT\n\n @see hiprtcResult"]
    pub fn hiprtcLinkAddFile(
        hip_link_state: hiprtcLinkState,
        input_type: hiprtcJITInputType,
        file_path: *const ::std::os::raw::c_char,
        num_options: ::std::os::raw::c_uint,
        options_ptr: *mut hiprtcJIT_option,
        option_values: *mut *mut ::std::os::raw::c_void,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Completes the linking of the given program.\n @ingroup Runtime\n @param [in] hip_link_state  hiprtc link state\n @param [in] input_type  Type of the input data or bitcode\n @param [in] image  Input data which is null terminated\n @param [in] image_size  Size of the input data\n @param [in] name  Optional name for this input\n @param [in] num_options  Size of the options\n @param [in] options_ptr  Array of options applied to this input\n @param [in] option_values  Array of option values cast to void*\n\n @returns #HIPRTC_SUCCESS, #HIPRTC_ERROR_INVALID_INPUT\n\n If adding the file fails, it will\n @return #HIPRTC_ERROR_PROGRAM_CREATION_FAILURE\n\n @see hiprtcResult"]
    pub fn hiprtcLinkAddData(
        hip_link_state: hiprtcLinkState,
        input_type: hiprtcJITInputType,
        image: *mut ::std::os::raw::c_void,
        image_size: usize,
        name: *const ::std::os::raw::c_char,
        num_options: ::std::os::raw::c_uint,
        options_ptr: *mut hiprtcJIT_option,
        option_values: *mut *mut ::std::os::raw::c_void,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Completes the linking of the given program.\n @ingroup Runtime\n @param [in]  hip_link_state  hiprtc link state\n @param [out]  bin_out  Upon success, points to the output binary\n @param [out]  size_out  Size of the binary is stored (optional)\n\n @returns #HIPRTC_SUCCESS\n\n If adding the data fails, it will\n @return #HIPRTC_ERROR_LINKING\n\n @see hiprtcResult"]
    pub fn hiprtcLinkComplete(
        hip_link_state: hiprtcLinkState,
        bin_out: *mut *mut ::std::os::raw::c_void,
        size_out: *mut usize,
    ) -> hiprtcResult;
}
extern "C" {
    #[doc = " @brief Deletes the link instance via hiprtc APIs.\n @ingroup Runtime\n @param [in] hip_link_state link state instance\n\n @returns #HIPRTC_SUCCESS\n\n @see hiprtcResult"]
    pub fn hiprtcLinkDestroy(hip_link_state: hiprtcLinkState) -> hiprtcResult;
}
